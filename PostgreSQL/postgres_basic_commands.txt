SQL

Structured 
Query
Language

#these are the operations performed

Create
Read
Update
Delete

Some basic examples:

CREATE TABLE PUBLIC."earthquake"(
	earthquake_id int,
	occurred_on timestamp without time zone,
	latitude numeric,
	longitude numeric,
	depth_e numeric,
	magnitude numeric,
	calculation_method varchar,
	network_id varchar,
	place varchar,
	cause varchar)
========================================================================================================
SELECT * FROM earthquake;
COPY PUBLIC."earthquake" from 'C:\workspace\myTools\PostgreSQL\earthquake.csv' DELIMITER ',' CSV HEADER;
SELECT * FROM earthquake;
SELECT * FROM earthquake
LIMIT 1;
SELECT COUNT(*) FROM earthquake;
SELECT magnitude,place,occurred_on FROM earthquake;

SELECT *
FROM earthquake
WHERE occurred_on >= '2000-01-01';

SELECT *
FROM earthquake
WHERE occurred_on >= '2010-01-01' AND occurred_on <= '2010-12-31'
ORDER BY magnitude DESC
LIMIT 1

SELECT column1, column2,...
FROM table1
WHERE condition1 AND condition2
ORDER BY column (ASC | DESC)
LIMIT n;

SELECT MIN(occurred_on), MAX(occurred_on)
FROM earthquake;

SELECT MIN(magnitude), MAX(magnitude)
FROM earthquake;

SELECT cause
FROM earthquake;

SELECT DISTINCT cause
FROM earthquake;

SELECT COUNT(*)
FROM earthquake
WHERE cause = 'earthquake';

SELECT *
FROM earthquake
WHERE cause = 'explosion';

SELECT magnitude,place, occurred_on
FROM earthquake
WHERE cause = 'nuclear explosion'
ORDER BY occurred_on DESC
LIMIT 1;

SELECT place,magnitude,occurred_on
FROM earthquake
ORDER BY magnitude DESC
LIMIT 10;

SELECT COUNT(*)
FROM earthquake
WHERE place LIKE '%Honshu%Japan%'
    AND occurred_on BETWEEN '2011-03-11' AND '2011-03-18';
========================================================================================================
#Assuming chatter is simple social network with mainly three tables chitter-user, chitter_post, chitter_follower
CREATE TABLE PUBLIC.chitter_user(
	user_id varchar, 
	username varchar,
	encrypted_password varchar,
	email varchar, 
	date_joined varchar)

INSERT INTO chitter_user
    (user_id, username,encrypted_password, email, date_joined)
VALUES
    (DEFAULT, 'firstuser','askdj8923424f843874', 'fake@fake.fake', '2018-02-20' )

verify: SELECT * FROM chitter-user

CREATE TABLE PUBLIC.chitter_post(
	post_id varchar, 
	user_id varchar,
========================================================================================================

CREATE TABLE PUBLIC.secret_user(
	user_id int, 
	first_name varchar,
	second_name varchar,
	code_name varchar, 
	country varchar,
	organization varchar,
	salary int,
	knows_kung_fu boolean)

UPDATE secret_user
SET first_name = pasupathi
WHERE user_id = 4;

UPDATE table_name
SET column1 = value1,
	column2 = value2,
	.....
WHERE conditions;

#if you do not include where clause , the change will be applied to every row in the table1

UPDATE secret_user
SET salary = 115000
WHERE organization = CI;

UPDATE secret_user
SET knows_kung_fu = TRUE
WHERE user_id IN (5,7,8);

#10% hike for all users(do not need WHERE clause)
UPDATE secret_user
SET salary = 1.1*salary;

#combined salary
SELECT SUM(salary)
FROM secret_user;
=======================================================================================================

CREATE TABLE PUBLIC.song(
	song_id int, 
	title varchar,
	artist varchar,
	album varchar, 
	year_released int,
	duration numeric,
	tempo numeric,
	loudness numeric)

COPY PUBLIC.song from 'C:\workspace\myTools\PostgreSQL\songs.csv' DELIMITER ',' CSV HEADER;

SELECT MIN(year_released), MAX(year_released)
FROM song;

SELECT DISTINCT year_released
FROM song
ORDER BY year_released;

SELECT COUNT(*) FROM song
WHERE year_released=0;

DELETE FROM song
WHERE year_released=0;

DELETE FROM table_name
WHERE condition(s);
#delete the rows not columns. if no WHERE clause, all rows will be deleted.

SELECT MIN(loudness), MAX(loudness)
FROM song;
======================================================================================================