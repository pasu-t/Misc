CREATE TABLE PUBLIC.martian(
	martian_id int,
	first_name varchar,
	last_name varchar,
	base_id int,
	super_id int);

INSERT INTO martian
    (martian_id, first_name,last_name, base_id, super_id)
VALUES
    (1, 'Rey', 'Jaffa', 1, null),
	(2, 'John', 'Cobra', 4, 10),
	(3, 'Sam', 'Link', 4, 2),
	(4, 'Sala','Meri', 1, 9),
	(5, 'Elma', 'Menta',2, 12),
	(6, 'Melisa', 'Les', 3, 8),
	(7, 'Elu', 'Malai', 1, 1),
	(8, 'Mark', 'Watney',1, null),
	(9, 'Beth', 'jonshan', 1, 1),
	(10, 'Chris', 'Ber', 4, null),
	(11, 'Nathaniel','York', 4, 2),
	(12, 'Elon', 'Musk', 2, null),
	(13, 'John', 'Carter', null, 8);

CREATE TABLE PUBLIC.base(
	base_id int,
	base_name varchar,
	founded date);

INSERT INTO base
    (base_id, base_name, founded)
VALUES
    (1, 'Tharsisland', '2037-06-03'),
	(2, 'Valles Marineris 2.0', '2048-12-01'),
	(3, 'Gale Cratertown', '2041-05-04'),
	(4, 'New New York', '2042-02-02'),
	(5, 'Olympus Mons spa & Casino', null);

SELECT *
FROM martian
INNER JOIN base
ON martian.base_id = base.base_id; # ON clause specify both table name and column name.

SELECT martian_id, base_id, base_name
FROM martian
INNER JOIN base
ON martian.base_id = base.base_id;

SELECT m.martian_id, b.base_id, b.base_name
FROM martian AS m
INNER JOIN base AS b
ON m.base_id = b.base_id;

SELECT column1,column2...
FROM martian
_____ JOIN base
ON martian.base_id = base.base_id;
WHERE condition(s)
ORDER BY value;

INNER Join --> only returns connected and matched rows
LEFT Join --> Return all connected rows and unconnected rows from left table(nulls in right)
RIGHT Join --> Return all connected rows and unconnected rows from right table(nulls in left)
FULL Join --> Return all connected rows and unconnected rows from both left and right tables

CREATE TABLE PUBLIC.visitor(
	visitor_id int,
	host_id int,
	first_name varchar,
	last_name varchar);

INSERT INTO visitor
    (visitor_id, host_id, first_name, last_name)
VALUES
    (1, 7, 'George', 'Ambrose'),
	(2, 1, 'Kris', 'Cardenas'),
	(3, 9, 'Priscilla', 'Lane'),
	(4, 11,'Jane', 'thornton'),
	(5, null, 'Doug', 'Stavenger'),
	(6, null, 'Jamie', 'waterman'),
	(7, 8, 'Martin', 'Humphries');
	
CREATE TABLE PUBLIC.inventory(
	base_id int,
	supply_id int,
	quantity int);
INSERT INTO inventory
    (base_id, supply_id, quantity)
VALUES
	(1, 1, 8),
	(1, 3, 5),
	(1, 5, 1),
	(1, 6, 2),
	(1, 8,12),
	(1, 9, 1),
	(2, 4, 5),
	(2, 8, 62),
	(2, 10, 37),
	(3, 2, 11),
	(3, 7, 2),
	(4, 10, 91);
	
CREATE TABLE PUBLIC.supply(
	supply_id int,
	name varchar,
	description varchar,
	quantity int);
	
INSERT INTO supply
    (supply_id, name, description, quantity)
VALUES
	(1, 'Solar Panel', 'standard 1x1 meter cell', 912),
	(2, 'Water Filter', 'This takes things out of your water', 6),
	(3, 'Duct Tape', 'A 10 meter roll of duct tape', 951),
	(4, 'Ketchup', 'Its Ketchup', 206),
	(5, 'Battery Cell', 'Standard 1000 KAh battery cell for', 17),
	(6, 'USB 6.0 Cable', 'Carbon fiber coated', 42),
	(7, 'Fuzzy Duster', 'It gets dusty around here', 19),
	(8, 'Mars Bars', 'The ORIGINAL Nutrient bar', 3801),
	(9, 'Air Filter', 'Removes 99% of all Martin dust', 23),
	(10, 'Famous Rays Frozen Pizza', 'This Martin favorite is covered', 823);
	
###Report Details: Display name of visitor
###                Show name of visitor's host
        	
SELECT visitor.first_name, visitor.last_name,
	   martian.first_name, visitor.last_name
FROM visitor
INNER JOIN martian
ON visitor.host_id = martian.martian_id;

SELECT v.first_name AS visitor_fn, v.last_name AS visitor_ln, 
	   m.first_name AS martian_fn, m.last_name AS martian_ln
FROM visitor AS v
LEFT JOIN martian AS m
ON v.host_id = m.martian_id;

SELECT m.first_name AS fn, m.last_name AS ln,
	   s.first_name AS super_fn, s.last_name AS super_ln
FROM martian AS m
LEFT JOIN martian AS s
ON m.super_id = s.martian_id;

###Report Details: Display list of each martain and the person they report to

SELECT *
FROM martian AS m
LEFT JOIN martian AS s
ON m.super_id = s.martian_id
ORDER BY m.martian_id;

SELECT m.first_name AS fn, m.last_name AS ln,
	   s.first_name AS super_fn, s.last_name AS super_ln
FROM martian AS m
LEFT JOIN martian AS s
ON m.super_id = s.martian_id
ORDER BY m.martian_id;

###Report Details: Inventory for Base #1

SELECT * FROM inventory WHERE base_id = 1;
#missing supply quantity at base and descirption

SELECT *
FROM (SELECT * FROM inventory WHERE base_id = 1) AS i
RIGHT JOIN supply as s
ON i.supply_id = s.supply_id
ORDER BY s.supply_id;

SELECT s.supply_id, i.quantity, s.description
FROM (SELECT * FROM inventory WHERE base_id = 1) AS i
RIGHT JOIN supply as s
ON i.supply_id = s.supply_id
ORDER BY s.supply_id;

###Report list of visitors without host_id
###Martians available to do jobs

SELECT *
FROM visitor as v
FULL JOIN martian AS m
ON v.host_id = m.martian_id
WHERE v.host_id IS NULL or m.martian_id IS NULL;

#After select filters

SELECT v.first_name AS visit_fn, v.last_name AS visit_ls,
	   m.first_name AS martian_fn, m.last_name AS martain_ln
FROM visitor AS v
FULL JOIN martian AS m
ON v.host_id = m.martian_id
WHERE v.host_id IS NULL or m.martian_id IS NULL;

========================================================================================================
CREATE TABLE PUBLIC.martian_confidentail(
	martian_id int,
	first_name varchar,
	last_name varchar,
	base_id int,
	super_id int,
	salary int,
	dna_id varchar);

INSERT INTO martian_confidentail
    (martian_id, first_name,last_name, base_id, super_id, salary, dna_id)
VALUES
    (1, 'Rey', 'Jaffa', 1, null, ),
	(2, 'John', 'Cobra', 4, 10),
	(3, 'Sam', 'Link', 4, 2),
	(4, 'Sala','Meri', 1, 9),
	(5, 'Elma', 'Menta',2, 12),
	(6, 'Melisa', 'Les', 3, 8),
	(7, 'Elu', 'Malai', 1, 1),
	(8, 'Mark', 'Watney',1, null),
	(9, 'Beth', 'jonshan', 1, 1),
	(10, 'Chris', 'Ber', 4, null),
	(11, 'Nathaniel','York', 4, 2),
	(12, 'Elon', 'Musk', 2, null),
	(13, 'John', 'Carter', null, 8);





	
